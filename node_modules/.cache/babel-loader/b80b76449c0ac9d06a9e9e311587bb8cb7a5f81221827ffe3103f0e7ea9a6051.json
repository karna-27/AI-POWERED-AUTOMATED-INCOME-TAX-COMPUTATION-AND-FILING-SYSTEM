{"ast":null,"code":"// // import React, { useState, useEffect } from 'react';\n// // import axios from 'axios';\n// // import Cookies from 'js-cookie';\n// // import './index.css'; // Import TaxHistory specific CSS\n\n// // const TaxHistory = () => {\n// //     const [history, setHistory] = useState([]);\n// //     const [loading, setLoading] = useState(true);\n// //     const [message, setMessage] = useState('');\n// //     const [messageType, setMessageType] = useState(''); // 'info', 'success', 'error'\n// //     const [selectedRecord, setSelectedRecord] = useState(null); // To view full details of a record\n// //     const [isGeneratingITR, setIsGeneratingITR] = useState(false);\n\n// //     // Helper function to safely format currency values\n// //     const formatCurrency = (value) => {\n// //         if (value === null || value === undefined || isNaN(parseFloat(value))) {\n// //             return 'N/A';\n// //         }\n// //         return parseFloat(value).toLocaleString('en-IN', {\n// //             style: 'currency',\n// //             currency: 'INR',\n// //             minimumFractionDigits: 2,\n// //             maximumFractionDigits: 2,\n// //         });\n// //     };\n\n// //     useEffect(() => {\n// //         const fetchHistory = async () => {\n// //             setLoading(true);\n// //             setMessage('Fetching your tax history...');\n// //             setMessageType('info');\n// //             const jwt_token = Cookies.get('jwt_token');\n\n// //             try {\n// //                 const config = {\n// //                     headers: {\n// //                         'Authorization': `Bearer ${jwt_token}`,\n// //                     }\n// //                 };\n// //                 const response = await axios.get('http://127.0.0.1:5000/api/tax-records', config); // Correct route\n\n// //                 if (response.data.status === 'success') {\n// //                     // Ensure response.data.history is an array before setting the history state\n// //                     if (Array.isArray(response.data.history)) {\n// //                         setHistory(response.data.history);\n// //                         setMessage('Tax history loaded successfully.');\n// //                         setMessageType('success');\n// //                     } else {\n// //                         // Handle cases where history data is not an array\n// //                         console.error('API returned non-array data for history property:', response.data.history);\n// //                         setHistory([]); // Set to empty array to prevent errors\n// //                         setMessage('Failed to load tax history: Unexpected data format.');\n// //                         setMessageType('error');\n// //                     }\n// //                 } else {\n// //                     // Handle cases where API status is not 'success'\n// //                     setMessage(response.data.message || 'Failed to fetch tax history.');\n// //                     setMessageType('error');\n// //                     setHistory([]); // Clear history on error to prevent rendering issues\n// //                 }\n// //             } catch (error) {\n// //                 console.error('Fetch history error:', error);\n// //                 if (error.response) {\n// //                     if (error.response.status === 401) {\n// //                         setMessage('Authentication required. Please log in.');\n// //                     } else if (error.response.data && error.response.data.message) {\n// //                         setMessage(`Error: ${error.response.data.message}`);\n// //                     } else {\n// //                         setMessage(`Server responded with status ${error.response.status}`);\n// //                     }\n// //                 } else {\n// //                     setMessage('An error occurred while fetching tax history. Check network connection and backend server.');\n// //                 }\n// //                 setMessageType('error');\n// //                 setHistory([]); // Clear history on network/server error as well\n// //             } finally {\n// //                 setLoading(false);\n// //             }\n// //         };\n\n// //         fetchHistory();\n// //     }, []); // Empty dependency array means this runs once on mount\n\n// //     const handleViewDetails = (record) => {\n// //         setSelectedRecord(record);\n// //     };\n\n// //     const handleCloseDetails = () => {\n// //         setSelectedRecord(null);\n// //     };\n\n// //     const handleGenerateITRForm = async (recordId) => {\n// //         setIsGeneratingITR(true);\n// //         setMessage('Generating ITR form...');\n// //         setMessageType('info');\n\n// //         const jwt_token = Cookies.get('jwt_token');\n\n// //         try {\n// //             const config = {\n// //                 headers: {\n// //                     'Authorization': `Bearer ${jwt_token}`,\n// //                 },\n// //                 responseType: 'blob', // Important for receiving a file\n// //             };\n\n// //             const response = await axios.get(`http://127.0.0.1:5000/api/generate_itr_form/${recordId}`, config);\n\n// //             if (response.status === 200) {\n// //                 const blob = new Blob([response.data], { type: 'application/pdf' });\n// //                 const downloadUrl = window.URL.createObjectURL(blob);\n// //                 const contentDisposition = response.headers['content-disposition'];\n// //                 let filename = `ITR_Form_${recordId}.pdf`; // Default filename\n\n// //                 if (contentDisposition) {\n// //                     const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\n// //                     if (filenameMatch && filenameMatch[1]) {\n// //                         filename = filenameMatch[1];\n// //                     }\n// //                 }\n\n// //                 const link = document.createElement('a');\n// //                 link.href = downloadUrl;\n// //                 link.setAttribute('download', filename);\n// //                 document.body.appendChild(link);\n// //                 link.click();\n// //                 link.remove();\n// //                 window.URL.revokeObjectURL(downloadUrl);\n\n// //                 setMessage('ITR form generated and downloaded successfully!');\n// //                 setMessageType('success');\n// //             } else {\n// //                 const errorData = await new Response(response.data).text(); // Read blob as text for error\n// //                 setMessage(`Failed to generate ITR form: ${errorData || response.statusText}`);\n// //                 setMessageType('error');\n// //             }\n// //         } catch (error) {\n// //             console.error('ITR generation error:', error);\n// //             if (axios.isAxiosError(error) && error.response && error.response.data) {\n// //                 const reader = new FileReader();\n// //                 reader.onload = () => {\n// //                     try {\n// //                         const errorJson = JSON.parse(reader.result);\n// //                         setMessage(`Error generating ITR form: ${errorJson.message || JSON.stringify(errorJson)}`);\n// //                     } catch (e) {\n// //                         setMessage(`Error generating ITR form: ${reader.result || error.response.statusText}`);\n// //                     }\n// //                 };\n// //                 reader.readAsText(error.response.data);\n// //             } else {\n// //                 setMessage('Network error or server unavailable during ITR form generation.');\n// //             }\n// //             setMessageType('error');\n// //         } finally {\n// //             setIsGeneratingITR(false);\n// //         }\n// //     };\n\n// //     return (\n// //         <div className=\"tax-history-container section-box\">\n// //             <h2 className=\"tax-history-title\">Your Tax Filing History</h2>\n\n// //             {loading && (\n// //                 <div className=\"tax-history-loading\">\n// //                     <div className=\"tax-history-spinner\"></div>\n// //                     {message}\n// //                 </div>\n// //             )}\n\n// //             {message && !loading && (\n// //                 <div className={`tax-history-message ${messageType}`}>\n// //                     {message}\n// //                 </div>\n// //             )}\n\n// //             {history.length === 0 && !loading && messageType !== 'error' && (\n// //                 <p className=\"no-records-message\">No tax records found. Upload documents to get started!</p>\n// //             )}\n\n// //             {!selectedRecord && history.length > 0 && !loading && (\n// //                 <div className=\"history-list\">\n// //                     {history.map((record) => (\n// //                         <div key={record._id} className=\"history-item section-box\">\n// //                             <div className=\"history-item-header\">\n// //                                 <h3>Record ID: {record._id.substring(0, 8)}...</h3>\n// //                                 <span className=\"timestamp\">\n// //                                     {new Date(record.timestamp).toLocaleString()}\n// //                                 </span>\n// //                             </div>\n// //                             <div className=\"history-item-details\">\n// //                                 <p><strong>Financial Year:</strong> {record.aggregated_financial_data?.financial_year || 'N/A'}</p>\n// //                                 <p><strong>Assessment Year:</strong> {record.aggregated_financial_data?.assessment_year || 'N/A'}</p>\n// //                                 <p><strong>Name:</strong> {record.aggregated_financial_data?.name || 'N/A'}</p>\n// //                                 <p><strong>Estimated Tax Payable:</strong> {formatCurrency(record.final_tax_computation_summary?.estimated_tax_payable)}</p>\n// //                                 <p><strong>Refund Due:</strong> {formatCurrency(record.final_tax_computation_summary?.refund_due_from_tax)}</p>\n// //                                 <p><strong>Tax Due:</strong> {formatCurrency(record.final_tax_computation_summary?.tax_due_to_government)}</p>\n// //                             </div>\n// //                             <div className=\"history-item-actions\">\n// //                                 <button onClick={() => handleViewDetails(record)} className=\"view-details-button\">\n// //                                     View Details\n// //                                 </button>\n// //                                 <button\n// //                                     onClick={() => handleGenerateITRForm(record._id)}\n// //                                     className=\"generate-itr-button\"\n// //                                     disabled={isGeneratingITR}\n// //                                 >\n// //                                     {isGeneratingITR ? 'Generating...' : 'Generate ITR Form'}\n// //                                 </button>\n// //                             </div>\n// //                         </div>\n// //                     ))}\n// //                 </div>\n// //             )}\n\n// //             {selectedRecord && (\n// //                 <div className=\"selected-record-details\">\n// //                     <button onClick={handleCloseDetails} className=\"back-button\">\n// //                         &larr; Back to History\n// //                     </button>\n// //                     <h3 className=\"selected-record-title\">Details for Record ID: {selectedRecord._id}</h3>\n\n// //                     {/* Document Processing Summary */}\n// //                     {selectedRecord.document_processing_summary && (\n// //                         <div className=\"document-processing-summary-section section-box\">\n// //                             <h4>Document Processing Summary</h4>\n// //                             {selectedRecord.document_processing_summary.map((doc, index) => {\n// //                                 const statusClass = doc.status === 'success' ? 'status-success' :\n// //                                                     doc.status === 'warning' ? 'status-warning' : 'status-error';\n// //                                 return (\n// //                                     <div key={index} className=\"document-status-item\">\n// //                                         <p><strong>File:</strong> {doc.filename} ({doc.stored_path && <a href={`http://127.0.0.1:5000${doc.stored_path}`} target=\"_blank\" rel=\"noopener noreferrer\">View Stored Document</a>})</p>\n// //                                         <p><strong>Status:</strong> <span className={statusClass}>{doc.status?.toUpperCase() || 'N/A'}</span></p>\n// //                                         <p><strong>Identified Type:</strong> {doc.identified_type || 'N/A'}</p>\n// //                                         <p><strong>Message:</strong> {doc.message || 'N/A'}</p>\n// //                                         {doc.extracted_fields && Object.keys(doc.extracted_fields).length > 0 && (\n// //                                             <p><strong>Extracted Fields (Partial):</strong>\n// //                                                 <pre className=\"extracted-fields-preview\">\n// //                                                     {JSON.stringify(doc.extracted_fields, null, 2)}\n// //                                                 </pre>\n// //                                             </p>\n// //                                         )}\n// //                                         {doc.extracted_raw_text && (\n// //                                             <p><strong>Extracted Raw Text Snippet:</strong> <pre className=\"extracted-raw-text-preview\">{doc.extracted_raw_text.substring(0, 200)}...</pre></p>\n// //                                         )}\n// //                                     </div>\n// //                                 );\n// //                             })}\n// //                         </div>\n// //                     )}\n\n// //                     {/* Aggregated Financial Data */}\n// //                     {selectedRecord.aggregated_financial_data && (\n// //                         <div className=\"aggregated-financial-data-section section-box\">\n// //                             <h4>Aggregated Financial Data</h4>\n// //                             <div className=\"income-details-section\">\n// //                                 <h5>Income Details</h5>\n// //                                 <p><strong>Financial Year:</strong> {selectedRecord.aggregated_financial_data.financial_year || 'N/A'}</p>\n// //                                 <p><strong>Assessment Year:</strong> {selectedRecord.aggregated_financial_data.assessment_year || 'N/A'}</p>\n// //                                 <p><strong>Name:</strong> {selectedRecord.aggregated_financial_data.name || 'N/A'}</p>\n// //                                 <p><strong>PAN:</strong> {selectedRecord.aggregated_financial_data.pan || 'N/A'}</p>\n// //                                 <p><strong>Date of Birth:</strong> {selectedRecord.aggregated_financial_data.date_of_birth || 'N/A'}</p>\n// //                                 <p><strong>Age:</strong> {selectedRecord.aggregated_financial_data.Age || 'N/A'}</p>\n// //                                 <p><strong>Gross Annual Salary:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_gross_salary)}</p>\n// //                                 <p><strong>Exempt Allowances:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.exempt_allowances)}</p>\n// //                                 <p><strong>Income from House Property:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.income_from_house_property)}</p>\n// //                                 <p><strong>Interest from Savings:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_interest_savings)}</p>\n// //                                 <p><strong>Interest from FD:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_interest_fd)}</p>\n// //                                 <p><strong>Dividend Income:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_dividend)}</p>\n// //                                 <p><strong>Miscellaneous Income:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_misc)}</p>\n// //                                 <p><strong>Long Term Capital Gains:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.capital_gains_long_term)}</p>\n// //                                 <p><strong>Short Term Capital Gains:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.capital_gains_short_term)}</p>\n// //                                 <p><strong>Total Gross Income (Aggregated):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_gross_income)}</p>\n// //                             </div>\n\n// //                             <div className=\"deductions-section\">\n// //                                 <h5>Deductions Claimed</h5>\n// //                                 <p><strong>Standard Deduction:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.standard_deduction)}</p>\n// //                                 <p><strong>Professional Tax:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.professional_tax)}</p>\n// //                                 <p><strong>Interest on Home Loan (Section 24(b)):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.interest_on_housing_loan_24b)}</p>\n// //                                 <p><strong>Section 80C Investments:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80C)}</p>\n// //                                 <p><strong>Section 80CCD1B:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80CCD1B)}</p>\n// //                                 <p><strong>Section 80D (Health Insurance):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80D)}</p>\n// //                                 <p><strong>Section 80G:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80G)}</p>\n// //                                 <p><strong>Section 80TTA:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80TTA)}</p>\n// //                                 <p><strong>Section 80TTB:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80TTB)}</p>\n// //                                 <p><strong>Section 80E (Education Loan Interest):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80E)}</p>\n// //                                 <p><strong>Total Deductions (Aggregated):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_deductions)}</p>\n// //                             </div>\n\n// //                             <div className=\"taxation-summary-section\">\n// //                                 <h5>Tax Payments & Regime</h5>\n// //                                 <p><strong>Total TDS Credit:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_tds)}</p>\n// //                                 <p><strong>Advance Tax Paid:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.advance_tax)}</p>\n// //                                 <p><strong>Self-Assessment Tax Paid:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.self_assessment_tax)}</p>\n// //                                 <p><strong>Tax Regime Chosen (from docs):</strong> <span className=\"highlight-regime\">{selectedRecord.aggregated_financial_data.tax_regime_chosen || 'Not Specified'}</span></p>\n// //                             </div>\n// //                         </div>\n// //                     )}\n\n// //                     {/* Final Tax Computation Summary (Rule-Based) */}\n// //                     {selectedRecord.final_tax_computation_summary && (\n// //                         <div className=\"final-tax-computation-section section-box\">\n// //                             <h4>Final Tax Computation Summary (Rule-Based)</h4>\n// //                             <div className=\"computation-detail\">\n// //                                 <p><strong>Calculated Gross Income:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.calculated_gross_income)}</p>\n// //                             </div>\n// //                             <div className=\"computation-detail\">\n// //                                 <p><strong>Calculated Total Deductions:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.calculated_total_deductions)}</p>\n// //                             </div>\n// //                             <div className=\"computation-detail\">\n// //                                 <p><strong>Computed Taxable Income:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.computed_taxable_income)}</p>\n// //                             </div>\n// //                             <div className=\"computation-detail\">\n// //                                 <p><strong>Estimated Tax Payable (Before TDS):</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.estimated_tax_payable)}</p>\n// //                             </div>\n// //                             <div className=\"computation-detail\">\n// //                                 <p><strong>Total TDS Credit:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.total_tds_credit)}</p>\n// //                             </div>\n// //                             <div className=\"computation-detail\">\n// //                                 <p><strong>Tax Regime Considered for Rule-Based Calculation:</strong> <span className=\"highlight-regime\">{selectedRecord.final_tax_computation_summary.regime_considered || 'N/A'}</span></p>\n// //                             </div>\n// //                             <div className=\"final-amount-box\">\n// //                                 {selectedRecord.final_tax_computation_summary.refund_due_from_tax > 0 && (\n// //                                     <p className=\"refund-amount\">\n// //                                         <strong>Refund Due from Tax:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.refund_due_from_tax)}\n// //                                     </p>\n// //                                 )}\n// //                                 {selectedRecord.final_tax_computation_summary.tax_due_to_government > 0 && (\n// //                                     <p className=\"tax-due-amount\">\n// //                                         <strong>Tax Due to Government:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.tax_due_to_government)}\n// //                                     </p>\n// //                                 )}\n// //                             </div>\n// //                             {selectedRecord.final_tax_computation_summary.notes && (\n// //                                 <p className=\"computation-notes\">\n// //                                     <strong>Note:</strong> {selectedRecord.final_tax_computation_summary.notes}\n// //                                 </p>\n// //                             )}\n// //                         </div>\n// //                     )}\n\n// //                     {/* AI Recommendations & Predictions */}\n// //                     {selectedRecord.ml_prediction_summary || selectedRecord.suggestions_from_gemini?.length > 0 || selectedRecord.gemini_regime_analysis ? (\n// //                         <div className=\"suggestions-output section-box\">\n// //                             <h4>AI Recommendations & Predictions</h4>\n// //                             {selectedRecord.suggestions_from_gemini && selectedRecord.suggestions_from_gemini.length > 0 ? (\n// //                                 <>\n// //                                     <h5>Based on Gemini AI:</h5>\n// //                                     <ul className=\"suggestions-list\">\n// //                                         {selectedRecord.suggestions_from_gemini.map((suggestion, index) => (\n// //                                             <li key={index}>{suggestion}</li>\n// //                                         ))}\n// //                                     </ul>\n// //                                 </>\n// //                             ) : (\n// //                                 <p>Gemini did not provide specific tax-saving suggestions for this record.</p>\n// //                             )}\n\n// //                             {selectedRecord.gemini_regime_analysis && (\n// //                                 <div className=\"gemini-regime-analysis\">\n// //                                     <h5>Gemini's Regime Analysis:</h5>\n// //                                     <p>{selectedRecord.gemini_regime_analysis}</p>\n// //                                 </div>\n// //                             )}\n\n// //                             {selectedRecord.ml_prediction_summary && (\n// //                                 <>\n// //                                     <h5>ML Model Prediction:</h5>\n// //                                     {selectedRecord.ml_prediction_summary.predicted_tax_regime && (\n// //                                         <p><strong>Predicted Tax Regime:</strong> {selectedRecord.ml_prediction_summary.predicted_tax_regime}</p>\n// //                                     )}\n// //                                     <p><strong>Predicted Tax Liability:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_tax_liability)}</p>\n// //                                     <p className=\"refund-amount\"><strong>Predicted Refund Due:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_refund_due)}</p>\n// //                                     <p className=\"tax-due-amount\"><strong>Predicted Additional Tax Due:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_additional_due)}</p>\n// //                                     {selectedRecord.ml_prediction_summary.notes && (\n// //                                         <p><strong>Notes:</strong> {selectedRecord.ml_prediction_summary.notes}</p>\n// //                                     )}\n// //                                 </>\n// //                             )}\n// //                         </div>\n// //                     ) : (\n// //                         <div className=\"section-box\">\n// //                             <p>No AI recommendations or ML predictions available for this record yet. These are generated when you click \"Get AI Suggestions & ML Predictions\" after uploading documents.</p>\n// //                         </div>\n// //                     )}\n\n// //                 </div>\n// //             )}\n// //         </div>\n// //     );\n// // };\n\n// // export default TaxHistory;\n\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import Cookies from 'js-cookie';\n// import './index.css'; // Import TaxHistory specific CSS\n\n// const TaxHistory = () => {\n//     const [history, setHistory] = useState([]);\n//     const [loading, setLoading] = useState(true);\n//     const [message, setMessage] = useState('');\n//     const [messageType, setMessageType] = useState(''); // 'info', 'success', 'error'\n//     const [selectedRecord, setSelectedRecord] = useState(null); // To view full details of a record\n//     const [isGeneratingITR, setIsGeneratingITR] = useState(false);\n\n//     // Helper function to safely format currency values\n//     const formatCurrency = (value) => {\n//         if (value === null || value === undefined || isNaN(parseFloat(value))) {\n//             return 'N/A';\n//         }\n//         return parseFloat(value).toLocaleString('en-IN', {\n//             style: 'currency',\n//             currency: 'INR',\n//             minimumFractionDigits: 2,\n//             maximumFractionDigits: 2,\n//         });\n//     };\n\n//     useEffect(() => {\n//         const fetchHistory = async () => {\n//             setLoading(true);\n//             setMessage('Fetching your tax history...');\n//             setMessageType('info');\n//             const jwt_token = Cookies.get('jwt_token');\n\n//             try {\n//                 const config = {\n//                     headers: {\n//                         'Authorization': `Bearer ${jwt_token}`,\n//                     }\n//                 };\n//                 const response = await axios.get('http://127.0.0.1:5000/api/tax-records', config); // Correct route\n\n//                 if (response.data.status === 'success') {\n//                     // Ensure response.data.history is an array before setting the history state\n//                     if (Array.isArray(response.data.history)) {\n//                         setHistory(response.data.history);\n//                         setMessage('Tax history loaded successfully.');\n//                         setMessageType('success');\n//                     } else {\n//                         // Handle cases where history data is not an array\n//                         console.error('API returned non-array data for history property:', response.data.history);\n//                         setHistory([]); // Set to empty array to prevent errors\n//                         setMessage('Failed to load tax history: Unexpected data format.');\n//                         setMessageType('error');\n//                     }\n//                 } else {\n//                     // Handle cases where API status is not 'success'\n//                     setMessage(response.data.message || 'Failed to fetch tax history.');\n//                     setMessageType('error');\n//                     setHistory([]); // Clear history on error to prevent rendering issues\n//                 }\n//             } catch (error) {\n//                 console.error('Fetch history error:', error);\n//                 if (error.response) {\n//                     if (error.response.status === 401) {\n//                         setMessage('Authentication required. Please log in.');\n//                     } else if (error.response.data && error.response.data.message) {\n//                         setMessage(`Error: ${error.response.data.message}`);\n//                     } else {\n//                         setMessage(`Server responded with status ${error.response.status}`);\n//                     }\n//                 } else {\n//                     setMessage('An error occurred while fetching tax history. Check network connection and backend server.');\n//                 }\n//                 setMessageType('error');\n//                 setHistory([]); // Clear history on network/server error as well\n//             } finally {\n//                 setLoading(false);\n//             }\n//         };\n\n//         fetchHistory();\n//     }, []); // Empty dependency array means this runs once on mount\n\n//     const handleViewDetails = (record) => {\n//         setSelectedRecord(record);\n//     };\n\n//     const handleCloseDetails = () => {\n//         setSelectedRecord(null);\n//     };\n\n//     const handleGenerateITRForm = async (recordId) => {\n//         setIsGeneratingITR(true);\n//         setMessage('Generating ITR form...');\n//         setMessageType('info');\n\n//         const jwt_token = Cookies.get('jwt_token');\n\n//         try {\n//             const config = {\n//                 headers: {\n//                     'Authorization': `Bearer ${jwt_token}`,\n//                 },\n//                 responseType: 'blob', // Important for receiving a file\n//             };\n\n//             const response = await axios.get(`http://127.0.0.1:5000/api/generate-itr/${recordId}`, config); // Corrected route\n\n//             if (response.status === 200) {\n//                 const blob = new Blob([response.data], { type: 'application/pdf' });\n//                 const downloadUrl = window.URL.createObjectURL(blob);\n//                 const contentDisposition = response.headers['content-disposition'];\n//                 let filename = `ITR_Form_${recordId}.pdf`; // Default filename\n\n//                 if (contentDisposition) {\n//                     const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\n//                     if (filenameMatch && filenameMatch[1]) {\n//                         filename = filenameMatch[1];\n//                     }\n//                 }\n\n//                 const link = document.createElement('a');\n//                 link.href = downloadUrl;\n//                 link.setAttribute('download', filename);\n//                 document.body.appendChild(link);\n//                 link.click();\n//                 link.remove();\n//                 window.URL.revokeObjectURL(downloadUrl);\n\n//                 setMessage('ITR form generated and downloaded successfully!');\n//                 setMessageType('success');\n//             } else {\n//                 const errorData = await new Response(response.data).text(); // Read blob as text for error\n//                 setMessage(`Failed to generate ITR form: ${errorData || response.statusText}`);\n//                 setMessageType('error');\n//             }\n//         } catch (error) {\n//             console.error('ITR generation error:', error);\n//             if (axios.isAxiosError(error) && error.response && error.response.data) {\n//                 const reader = new FileReader();\n//                 reader.onload = () => {\n//                     try {\n//                         const errorJson = JSON.parse(reader.result);\n//                         setMessage(`Error generating ITR form: ${errorJson.message || JSON.stringify(errorJson)}`);\n//                     } catch (e) {\n//                         setMessage(`Error generating ITR form: ${reader.result || error.response.statusText}`);\n//                     }\n//                 };\n//                 reader.readAsText(error.response.data);\n//             } else {\n//                 setMessage('Network error or server unavailable during ITR form generation.');\n//             }\n//             setMessageType('error');\n//         } finally {\n//             setIsGeneratingITR(false);\n//         }\n//     };\n\n//     return (\n//         <div className=\"tax-history-container section-box\">\n//             <h2 className=\"tax-history-title\">Your Tax Filing History</h2>\n\n//             {loading && (\n//                 <div className=\"tax-history-loading\">\n//                     <div className=\"tax-history-spinner\"></div>\n//                     {message}\n//                 </div>\n//             )}\n\n//             {message && !loading && (\n//                 <div className={`tax-history-message ${messageType}`}>\n//                     {message}\n//                 </div>\n//             )}\n\n//             {history.length === 0 && !loading && messageType !== 'error' && (\n//                 <p className=\"no-records-message\">No tax records found. Upload documents to get started!</p>\n//             )}\n\n//             {!selectedRecord && history.length > 0 && !loading && (\n//                 <div className=\"history-list\">\n//                     {history.map((record) => (\n//                         <div key={record._id} className=\"history-item section-box\">\n//                             <div className=\"history-item-header\">\n//                                 <h3>Record ID: {record._id.substring(0, 8)}...</h3>\n//                                 <span className=\"timestamp\">\n//                                     {new Date(record.timestamp).toLocaleString()}\n//                                 </span>\n//                             </div>\n//                             <div className=\"history-item-details\">\n//                                 <p><strong>Financial Year:</strong> {record.aggregated_financial_data?.financial_year || 'N/A'}</p>\n//                                 <p><strong>Assessment Year:</strong> {record.aggregated_financial_data?.assessment_year || 'N/A'}</p>\n//                                 <p><strong>Name:</strong> {record.aggregated_financial_data?.name_of_employee || 'N/A'}</p> {/* Corrected property name */}\n//                                 <p><strong>Estimated Tax Payable:</strong> {formatCurrency(record.final_tax_computation_summary?.estimated_tax_payable)}</p>\n//                                 <p><strong>Refund Due:</strong> {formatCurrency(record.final_tax_computation_summary?.predicted_refund_due)}</p> {/* Corrected property name */}\n//                                 <p><strong>Tax Due:</strong> {formatCurrency(record.final_tax_computation_summary?.predicted_additional_due)}</p> {/* Corrected property name */}\n//                             </div>\n//                             <div className=\"history-item-actions\">\n//                                 <button onClick={() => handleViewDetails(record)} className=\"view-details-button\">\n//                                     View Details\n//                                 </button>\n//                                 <button\n//                                     onClick={() => handleGenerateITRForm(record._id)}\n//                                     className=\"generate-itr-button\"\n//                                     disabled={isGeneratingITR}\n//                                 >\n//                                     {isGeneratingITR ? 'Generating...' : 'Generate ITR Form'}\n//                                 </button>\n//                             </div>\n//                         </div>\n//                     ))}\n//                 </div>\n//             )}\n\n//             {selectedRecord && (\n//                 <div className=\"selected-record-details\">\n//                     <button onClick={handleCloseDetails} className=\"back-button\">\n//                         &larr; Back to History\n//                     </button>\n//                     <h3 className=\"selected-record-title\">Details for Record ID: {selectedRecord._id}</h3>\n\n//                     {/* Document Processing Summary */}\n//                     {selectedRecord.document_processing_summary && (\n//                         <div className=\"document-processing-summary-section section-box\">\n//                             <h4>Document Processing Summary</h4>\n//                             {selectedRecord.document_processing_summary.map((doc, index) => {\n//                                 const statusClass = doc.status === 'success' ? 'status-success' :\n//                                                      doc.status === 'warning' ? 'status-warning' : 'status-error';\n//                                 return (\n//                                     <div key={index} className=\"document-status-item\">\n//                                         <p><strong>File:</strong> {doc.filename} ({doc.stored_path && <a href={`http://127.0.0.1:5000${doc.stored_path}`} target=\"_blank\" rel=\"noopener noreferrer\">View Stored Document</a>})</p>\n//                                         <p><strong>Status:</strong> <span className={statusClass}>{doc.status?.toUpperCase() || 'N/A'}</span></p>\n//                                         <p><strong>Identified Type:</strong> {doc.identified_type || 'N/A'}</p>\n//                                         <p><strong>Message:</strong> {doc.message || 'N/A'}</p>\n//                                         {doc.extracted_fields && Object.keys(doc.extracted_fields).length > 0 && (\n//                                             <p><strong>Extracted Fields (Partial):</strong>\n//                                                 <pre className=\"extracted-fields-preview\">\n//                                                     {JSON.stringify(doc.extracted_fields, null, 2)}\n//                                                 </pre>\n//                                             </p>\n//                                         )}\n//                                         {doc.extracted_raw_text && (\n//                                             <p><strong>Extracted Raw Text Snippet:</strong> <pre className=\"extracted-raw-text-preview\">{doc.extracted_raw_text.substring(0, 200)}...</pre></p>\n//                                         )}\n//                                     </div>\n//                                 );\n//                             })}\n//                         </div>\n//                     )}\n\n//                     {/* Aggregated Financial Data */}\n//                     {selectedRecord.aggregated_financial_data && (\n//                         <div className=\"aggregated-financial-data-section section-box\">\n//                             <h4>Aggregated Financial Data</h4>\n//                             <div className=\"income-details-section\">\n//                                 <h5>Income Details</h5>\n//                                 <p><strong>Financial Year:</strong> {selectedRecord.aggregated_financial_data.financial_year || 'N/A'}</p>\n//                                 <p><strong>Assessment Year:</strong> {selectedRecord.aggregated_financial_data.assessment_year || 'N/A'}</p>\n//                                 <p><strong>Name:</strong> {selectedRecord.aggregated_financial_data.name_of_employee || 'N/A'}</p>\n//                                 <p><strong>PAN:</strong> {selectedRecord.aggregated_financial_data.pan_of_employee || 'N/A'}</p>\n//                                 <p><strong>Date of Birth:</strong> {selectedRecord.aggregated_financial_data.date_of_birth || 'N/A'}</p>\n//                                 <p><strong>Age:</strong> {selectedRecord.aggregated_financial_data.Age || 'N/A'}</p>\n//                                 <p><strong>Gross Annual Salary:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.gross_salary_total)}</p>\n//                                 <p><strong>Exempt Allowances:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_exempt_allowances)}</p>\n//                                 <p><strong>Income from House Property:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.income_from_house_property)}</p>\n//                                 {/* Removed these as backend aggregates to income_from_other_sources */}\n//                                 {/* <p><strong>Interest from Savings:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_interest_savings)}</p>\n//                                 <p><strong>Interest from FD:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_interest_fd)}</p>\n//                                 <p><strong>Dividend Income:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_dividend)}</p>\n//                                 <p><strong>Miscellaneous Income:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_misc)}</p> */}\n//                                 <p><strong>Income from Other Sources:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.income_from_other_sources)}</p>\n//                                 <p><strong>Long Term Capital Gains:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.capital_gains_long_term)}</p>\n//                                 <p><strong>Short Term Capital Gains:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.capital_gains_short_term)}</p>\n//                                 <p className=\"font-bold\"><strong>Total Gross Income (Aggregated):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_gross_income)}</p>\n//                             </div>\n\n//                             <div className=\"deductions-section\">\n//                                 <h5>Deductions Claimed</h5>\n//                                 <p><strong>Standard Deduction:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.standard_deduction)}</p>\n//                                 <p><strong>Professional Tax:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.professional_tax)}</p>\n//                                 <p><strong>Interest on Home Loan (Section 24(b)):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.interest_on_housing_loan_24b)}</p>\n//                                 <p><strong>Section 80C Investments:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80C)}</p>\n//                                 <p><strong>Section 80CCD1B:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80CCD1B)}</p>\n//                                 <p><strong>Section 80D (Health Insurance):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80D)}</p>\n//                                 <p><strong>Section 80G:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80G)}</p>\n//                                 <p><strong>Section 80TTA:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80TTA)}</p>\n//                                 <p><strong>Section 80TTB:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80TTB)}</p>\n//                                 <p><strong>Section 80E (Education Loan Interest):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80E)}</p>\n//                                 <p className=\"font-bold\"><strong>Total Deductions (Overall):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_deductions)}</p>\n//                             </div>\n\n//                             <div className=\"taxation-summary-section\">\n//                                 <h5>Tax Payments & Regime</h5>\n//                                 <p><strong>Total TDS Credit:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.total_tax_paid_credit)}</p>\n//                                 <p><strong>Advance Tax Paid:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.advance_tax)}</p>\n//                                 <p><strong>Self-Assessment Tax Paid:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.self_assessment_tax)}</p>\n//                                 <p><strong>Tax Regime Chosen (from docs):</strong> <span className=\"highlight-regime\">{selectedRecord.aggregated_financial_data.tax_regime_chosen || 'Not Specified'}</span></p>\n//                             </div>\n//                         </div>\n//                     )}\n\n//                     {/* Final Tax Computation Summary (Rule-Based) */}\n//                     {selectedRecord.final_tax_computation_summary && (\n//                         <div className=\"final-tax-computation-section section-box\">\n//                             <h4>Final Tax Computation Summary (Rule-Based)</h4>\n//                             <div className=\"computation-detail\">\n//                                 <p><strong>Calculated Gross Income:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.calculated_gross_income)}</p>\n//                             </div>\n//                             <div className=\"computation-detail\">\n//                                 <p><strong>Calculated Total Deductions:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.calculated_total_deductions)}</p>\n//                             </div>\n//                             <div className=\"computation-detail\">\n//                                 <p><strong>Computed Taxable Income:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.computed_taxable_income)}</p>\n//                             </div>\n//                             <div className=\"computation-detail\">\n//                                 <p><strong>Estimated Tax Payable (Before Credits):</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.estimated_tax_payable)}</p>\n//                             </div>\n//                             <div className=\"computation-detail\">\n//                                 <p><strong>Total Tax Paid Credit:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.total_tax_paid_credit)}</p>\n//                             </div>\n//                             <div className=\"computation-detail\">\n//                                 <p><strong>Tax Regime Considered for Rule-Based Calculation:</strong> <span className=\"highlight-regime\">{selectedRecord.final_tax_computation_summary.predicted_tax_regime || 'N/A'}</span></p> {/* Corrected to predicted_tax_regime from backend */}\n//                             </div>\n//                             <div className=\"final-amount-box\">\n//                                 {selectedRecord.final_tax_computation_summary.predicted_refund_due > 0 && (\n//                                     <p className=\"refund-amount\">\n//                                         <strong>Refund Due:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.predicted_refund_due)}\n//                                     </p>\n//                                 )}\n//                                 {selectedRecord.final_tax_computation_summary.predicted_additional_due > 0 && (\n//                                     <p className=\"tax-due-amount\">\n//                                         <strong>Additional Tax Due:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.predicted_additional_due)}\n//                                     </p>\n//                                 )}\n//                             </div>\n//                             {selectedRecord.final_tax_computation_summary.notes && (\n//                                 <p className=\"computation-notes\">\n//                                     <strong>Note:</strong> {Array.isArray(selectedRecord.final_tax_computation_summary.notes) ? selectedRecord.final_tax_computation_summary.notes.join(', ') : selectedRecord.final_tax_computation_summary.notes}\n//                                 </p>\n//                             )}\n\n//                             {selectedRecord.final_tax_computation_summary.calculation_details && selectedRecord.final_tax_computation_summary.calculation_details.length > 0 && (\n//                                 <div className=\"detailed-calculation-section mt-4\">\n//                                     <h5>Detailed Calculation Steps:</h5>\n//                                     <ul className=\"list-disc list-inside text-sm pl-4\">\n//                                         {selectedRecord.final_tax_computation_summary.calculation_details.map((detail, index) => (\n//                                             <li key={index} className=\"mb-1\">{detail}</li>\n//                                         ))}\n//                                     </ul>\n//                                 </div>\n//                             )}\n//                         </div>\n//                     )}\n\n//                     {/* AI Recommendations & Predictions */}\n//                     {selectedRecord.ml_prediction_summary || selectedRecord.suggestions_from_gemini?.length > 0 || selectedRecord.gemini_regime_analysis ? (\n//                         <div className=\"suggestions-output section-box\">\n//                             <h4>AI Recommendations & Predictions</h4>\n//                             {selectedRecord.suggestions_from_gemini && selectedRecord.suggestions_from_gemini.length > 0 ? (\n//                                 <>\n//                                     <h5>Based on Gemini AI:</h5>\n//                                     <ul className=\"suggestions-list\">\n//                                         {selectedRecord.suggestions_from_gemini.map((suggestion, index) => (\n//                                             <li key={index}>{suggestion}</li>\n//                                         ))}\n//                                     </ul>\n//                                 </>\n//                             ) : (\n//                                 <p>Gemini did not provide specific tax-saving suggestions for this record.</p>\n//                             )}\n\n//                             {selectedRecord.gemini_regime_analysis && (\n//                                 <div className=\"gemini-regime-analysis\">\n//                                     <h5>Gemini's Regime Analysis:</h5>\n//                                     <p>{selectedRecord.gemini_regime_analysis}</p>\n//                                 </div>\n//                             )}\n\n//                             {selectedRecord.ml_prediction_summary && (\n//                                 <>\n//                                     <h5>ML Model Prediction:</h5>\n//                                     {selectedRecord.ml_prediction_summary.predicted_tax_regime && (\n//                                         <p><strong>Predicted Tax Regime:</strong> {selectedRecord.ml_prediction_summary.predicted_tax_regime}</p>\n//                                     )}\n//                                     <p><strong>Predicted Tax Liability:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_tax_liability)}</p>\n//                                     <p className=\"refund-amount\"><strong>Predicted Refund Due:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_refund_due)}</p>\n//                                     <p className=\"tax-due-amount\"><strong>Predicted Additional Tax Due:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_additional_due)}</p>\n//                                     {selectedRecord.ml_prediction_summary.notes && (\n//                                         <p><strong>Notes:</strong> {selectedRecord.ml_prediction_summary.notes}</p>\n//                                     )}\n//                                 </>\n//                             )}\n//                         </div>\n//                     ) : (\n//                         <div className=\"section-box\">\n//                             <p>No AI recommendations or ML predictions available for this record yet. These are generated when you click \"Get AI Suggestions & ML Predictions\" after uploading documents.</p>\n//                         </div>\n//                     )}\n\n//                 </div>\n//             )}\n//         </div>\n//     );\n// };\n\n// export default TaxHistory;","map":{"version":3,"names":[],"sources":["C:/Users/gumma/Downloads/All_Projects/GarudaTaxAi/src/components/TaxHistory/index.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n// // import axios from 'axios';\r\n// // import Cookies from 'js-cookie';\r\n// // import './index.css'; // Import TaxHistory specific CSS\r\n\r\n// // const TaxHistory = () => {\r\n// //     const [history, setHistory] = useState([]);\r\n// //     const [loading, setLoading] = useState(true);\r\n// //     const [message, setMessage] = useState('');\r\n// //     const [messageType, setMessageType] = useState(''); // 'info', 'success', 'error'\r\n// //     const [selectedRecord, setSelectedRecord] = useState(null); // To view full details of a record\r\n// //     const [isGeneratingITR, setIsGeneratingITR] = useState(false);\r\n\r\n// //     // Helper function to safely format currency values\r\n// //     const formatCurrency = (value) => {\r\n// //         if (value === null || value === undefined || isNaN(parseFloat(value))) {\r\n// //             return 'N/A';\r\n// //         }\r\n// //         return parseFloat(value).toLocaleString('en-IN', {\r\n// //             style: 'currency',\r\n// //             currency: 'INR',\r\n// //             minimumFractionDigits: 2,\r\n// //             maximumFractionDigits: 2,\r\n// //         });\r\n// //     };\r\n\r\n// //     useEffect(() => {\r\n// //         const fetchHistory = async () => {\r\n// //             setLoading(true);\r\n// //             setMessage('Fetching your tax history...');\r\n// //             setMessageType('info');\r\n// //             const jwt_token = Cookies.get('jwt_token');\r\n\r\n// //             try {\r\n// //                 const config = {\r\n// //                     headers: {\r\n// //                         'Authorization': `Bearer ${jwt_token}`,\r\n// //                     }\r\n// //                 };\r\n// //                 const response = await axios.get('http://127.0.0.1:5000/api/tax-records', config); // Correct route\r\n\r\n// //                 if (response.data.status === 'success') {\r\n// //                     // Ensure response.data.history is an array before setting the history state\r\n// //                     if (Array.isArray(response.data.history)) {\r\n// //                         setHistory(response.data.history);\r\n// //                         setMessage('Tax history loaded successfully.');\r\n// //                         setMessageType('success');\r\n// //                     } else {\r\n// //                         // Handle cases where history data is not an array\r\n// //                         console.error('API returned non-array data for history property:', response.data.history);\r\n// //                         setHistory([]); // Set to empty array to prevent errors\r\n// //                         setMessage('Failed to load tax history: Unexpected data format.');\r\n// //                         setMessageType('error');\r\n// //                     }\r\n// //                 } else {\r\n// //                     // Handle cases where API status is not 'success'\r\n// //                     setMessage(response.data.message || 'Failed to fetch tax history.');\r\n// //                     setMessageType('error');\r\n// //                     setHistory([]); // Clear history on error to prevent rendering issues\r\n// //                 }\r\n// //             } catch (error) {\r\n// //                 console.error('Fetch history error:', error);\r\n// //                 if (error.response) {\r\n// //                     if (error.response.status === 401) {\r\n// //                         setMessage('Authentication required. Please log in.');\r\n// //                     } else if (error.response.data && error.response.data.message) {\r\n// //                         setMessage(`Error: ${error.response.data.message}`);\r\n// //                     } else {\r\n// //                         setMessage(`Server responded with status ${error.response.status}`);\r\n// //                     }\r\n// //                 } else {\r\n// //                     setMessage('An error occurred while fetching tax history. Check network connection and backend server.');\r\n// //                 }\r\n// //                 setMessageType('error');\r\n// //                 setHistory([]); // Clear history on network/server error as well\r\n// //             } finally {\r\n// //                 setLoading(false);\r\n// //             }\r\n// //         };\r\n\r\n// //         fetchHistory();\r\n// //     }, []); // Empty dependency array means this runs once on mount\r\n\r\n// //     const handleViewDetails = (record) => {\r\n// //         setSelectedRecord(record);\r\n// //     };\r\n\r\n// //     const handleCloseDetails = () => {\r\n// //         setSelectedRecord(null);\r\n// //     };\r\n\r\n// //     const handleGenerateITRForm = async (recordId) => {\r\n// //         setIsGeneratingITR(true);\r\n// //         setMessage('Generating ITR form...');\r\n// //         setMessageType('info');\r\n\r\n// //         const jwt_token = Cookies.get('jwt_token');\r\n\r\n// //         try {\r\n// //             const config = {\r\n// //                 headers: {\r\n// //                     'Authorization': `Bearer ${jwt_token}`,\r\n// //                 },\r\n// //                 responseType: 'blob', // Important for receiving a file\r\n// //             };\r\n            \r\n// //             const response = await axios.get(`http://127.0.0.1:5000/api/generate_itr_form/${recordId}`, config);\r\n\r\n// //             if (response.status === 200) {\r\n// //                 const blob = new Blob([response.data], { type: 'application/pdf' });\r\n// //                 const downloadUrl = window.URL.createObjectURL(blob);\r\n// //                 const contentDisposition = response.headers['content-disposition'];\r\n// //                 let filename = `ITR_Form_${recordId}.pdf`; // Default filename\r\n\r\n// //                 if (contentDisposition) {\r\n// //                     const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\r\n// //                     if (filenameMatch && filenameMatch[1]) {\r\n// //                         filename = filenameMatch[1];\r\n// //                     }\r\n// //                 }\r\n                \r\n// //                 const link = document.createElement('a');\r\n// //                 link.href = downloadUrl;\r\n// //                 link.setAttribute('download', filename);\r\n// //                 document.body.appendChild(link);\r\n// //                 link.click();\r\n// //                 link.remove();\r\n// //                 window.URL.revokeObjectURL(downloadUrl);\r\n\r\n// //                 setMessage('ITR form generated and downloaded successfully!');\r\n// //                 setMessageType('success');\r\n// //             } else {\r\n// //                 const errorData = await new Response(response.data).text(); // Read blob as text for error\r\n// //                 setMessage(`Failed to generate ITR form: ${errorData || response.statusText}`);\r\n// //                 setMessageType('error');\r\n// //             }\r\n// //         } catch (error) {\r\n// //             console.error('ITR generation error:', error);\r\n// //             if (axios.isAxiosError(error) && error.response && error.response.data) {\r\n// //                 const reader = new FileReader();\r\n// //                 reader.onload = () => {\r\n// //                     try {\r\n// //                         const errorJson = JSON.parse(reader.result);\r\n// //                         setMessage(`Error generating ITR form: ${errorJson.message || JSON.stringify(errorJson)}`);\r\n// //                     } catch (e) {\r\n// //                         setMessage(`Error generating ITR form: ${reader.result || error.response.statusText}`);\r\n// //                     }\r\n// //                 };\r\n// //                 reader.readAsText(error.response.data);\r\n// //             } else {\r\n// //                 setMessage('Network error or server unavailable during ITR form generation.');\r\n// //             }\r\n// //             setMessageType('error');\r\n// //         } finally {\r\n// //             setIsGeneratingITR(false);\r\n// //         }\r\n// //     };\r\n\r\n\r\n// //     return (\r\n// //         <div className=\"tax-history-container section-box\">\r\n// //             <h2 className=\"tax-history-title\">Your Tax Filing History</h2>\r\n\r\n// //             {loading && (\r\n// //                 <div className=\"tax-history-loading\">\r\n// //                     <div className=\"tax-history-spinner\"></div>\r\n// //                     {message}\r\n// //                 </div>\r\n// //             )}\r\n\r\n// //             {message && !loading && (\r\n// //                 <div className={`tax-history-message ${messageType}`}>\r\n// //                     {message}\r\n// //                 </div>\r\n// //             )}\r\n\r\n// //             {history.length === 0 && !loading && messageType !== 'error' && (\r\n// //                 <p className=\"no-records-message\">No tax records found. Upload documents to get started!</p>\r\n// //             )}\r\n\r\n// //             {!selectedRecord && history.length > 0 && !loading && (\r\n// //                 <div className=\"history-list\">\r\n// //                     {history.map((record) => (\r\n// //                         <div key={record._id} className=\"history-item section-box\">\r\n// //                             <div className=\"history-item-header\">\r\n// //                                 <h3>Record ID: {record._id.substring(0, 8)}...</h3>\r\n// //                                 <span className=\"timestamp\">\r\n// //                                     {new Date(record.timestamp).toLocaleString()}\r\n// //                                 </span>\r\n// //                             </div>\r\n// //                             <div className=\"history-item-details\">\r\n// //                                 <p><strong>Financial Year:</strong> {record.aggregated_financial_data?.financial_year || 'N/A'}</p>\r\n// //                                 <p><strong>Assessment Year:</strong> {record.aggregated_financial_data?.assessment_year || 'N/A'}</p>\r\n// //                                 <p><strong>Name:</strong> {record.aggregated_financial_data?.name || 'N/A'}</p>\r\n// //                                 <p><strong>Estimated Tax Payable:</strong> {formatCurrency(record.final_tax_computation_summary?.estimated_tax_payable)}</p>\r\n// //                                 <p><strong>Refund Due:</strong> {formatCurrency(record.final_tax_computation_summary?.refund_due_from_tax)}</p>\r\n// //                                 <p><strong>Tax Due:</strong> {formatCurrency(record.final_tax_computation_summary?.tax_due_to_government)}</p>\r\n// //                             </div>\r\n// //                             <div className=\"history-item-actions\">\r\n// //                                 <button onClick={() => handleViewDetails(record)} className=\"view-details-button\">\r\n// //                                     View Details\r\n// //                                 </button>\r\n// //                                 <button\r\n// //                                     onClick={() => handleGenerateITRForm(record._id)}\r\n// //                                     className=\"generate-itr-button\"\r\n// //                                     disabled={isGeneratingITR}\r\n// //                                 >\r\n// //                                     {isGeneratingITR ? 'Generating...' : 'Generate ITR Form'}\r\n// //                                 </button>\r\n// //                             </div>\r\n// //                         </div>\r\n// //                     ))}\r\n// //                 </div>\r\n// //             )}\r\n\r\n// //             {selectedRecord && (\r\n// //                 <div className=\"selected-record-details\">\r\n// //                     <button onClick={handleCloseDetails} className=\"back-button\">\r\n// //                         &larr; Back to History\r\n// //                     </button>\r\n// //                     <h3 className=\"selected-record-title\">Details for Record ID: {selectedRecord._id}</h3>\r\n\r\n// //                     {/* Document Processing Summary */}\r\n// //                     {selectedRecord.document_processing_summary && (\r\n// //                         <div className=\"document-processing-summary-section section-box\">\r\n// //                             <h4>Document Processing Summary</h4>\r\n// //                             {selectedRecord.document_processing_summary.map((doc, index) => {\r\n// //                                 const statusClass = doc.status === 'success' ? 'status-success' :\r\n// //                                                     doc.status === 'warning' ? 'status-warning' : 'status-error';\r\n// //                                 return (\r\n// //                                     <div key={index} className=\"document-status-item\">\r\n// //                                         <p><strong>File:</strong> {doc.filename} ({doc.stored_path && <a href={`http://127.0.0.1:5000${doc.stored_path}`} target=\"_blank\" rel=\"noopener noreferrer\">View Stored Document</a>})</p>\r\n// //                                         <p><strong>Status:</strong> <span className={statusClass}>{doc.status?.toUpperCase() || 'N/A'}</span></p>\r\n// //                                         <p><strong>Identified Type:</strong> {doc.identified_type || 'N/A'}</p>\r\n// //                                         <p><strong>Message:</strong> {doc.message || 'N/A'}</p>\r\n// //                                         {doc.extracted_fields && Object.keys(doc.extracted_fields).length > 0 && (\r\n// //                                             <p><strong>Extracted Fields (Partial):</strong>\r\n// //                                                 <pre className=\"extracted-fields-preview\">\r\n// //                                                     {JSON.stringify(doc.extracted_fields, null, 2)}\r\n// //                                                 </pre>\r\n// //                                             </p>\r\n// //                                         )}\r\n// //                                         {doc.extracted_raw_text && (\r\n// //                                             <p><strong>Extracted Raw Text Snippet:</strong> <pre className=\"extracted-raw-text-preview\">{doc.extracted_raw_text.substring(0, 200)}...</pre></p>\r\n// //                                         )}\r\n// //                                     </div>\r\n// //                                 );\r\n// //                             })}\r\n// //                         </div>\r\n// //                     )}\r\n\r\n// //                     {/* Aggregated Financial Data */}\r\n// //                     {selectedRecord.aggregated_financial_data && (\r\n// //                         <div className=\"aggregated-financial-data-section section-box\">\r\n// //                             <h4>Aggregated Financial Data</h4>\r\n// //                             <div className=\"income-details-section\">\r\n// //                                 <h5>Income Details</h5>\r\n// //                                 <p><strong>Financial Year:</strong> {selectedRecord.aggregated_financial_data.financial_year || 'N/A'}</p>\r\n// //                                 <p><strong>Assessment Year:</strong> {selectedRecord.aggregated_financial_data.assessment_year || 'N/A'}</p>\r\n// //                                 <p><strong>Name:</strong> {selectedRecord.aggregated_financial_data.name || 'N/A'}</p>\r\n// //                                 <p><strong>PAN:</strong> {selectedRecord.aggregated_financial_data.pan || 'N/A'}</p>\r\n// //                                 <p><strong>Date of Birth:</strong> {selectedRecord.aggregated_financial_data.date_of_birth || 'N/A'}</p>\r\n// //                                 <p><strong>Age:</strong> {selectedRecord.aggregated_financial_data.Age || 'N/A'}</p>\r\n// //                                 <p><strong>Gross Annual Salary:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_gross_salary)}</p>\r\n// //                                 <p><strong>Exempt Allowances:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.exempt_allowances)}</p>\r\n// //                                 <p><strong>Income from House Property:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.income_from_house_property)}</p>\r\n// //                                 <p><strong>Interest from Savings:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_interest_savings)}</p>\r\n// //                                 <p><strong>Interest from FD:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_interest_fd)}</p>\r\n// //                                 <p><strong>Dividend Income:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_dividend)}</p>\r\n// //                                 <p><strong>Miscellaneous Income:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_misc)}</p>\r\n// //                                 <p><strong>Long Term Capital Gains:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.capital_gains_long_term)}</p>\r\n// //                                 <p><strong>Short Term Capital Gains:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.capital_gains_short_term)}</p>\r\n// //                                 <p><strong>Total Gross Income (Aggregated):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_gross_income)}</p>\r\n// //                             </div>\r\n\r\n// //                             <div className=\"deductions-section\">\r\n// //                                 <h5>Deductions Claimed</h5>\r\n// //                                 <p><strong>Standard Deduction:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.standard_deduction)}</p>\r\n// //                                 <p><strong>Professional Tax:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.professional_tax)}</p>\r\n// //                                 <p><strong>Interest on Home Loan (Section 24(b)):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.interest_on_housing_loan_24b)}</p>\r\n// //                                 <p><strong>Section 80C Investments:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80C)}</p>\r\n// //                                 <p><strong>Section 80CCD1B:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80CCD1B)}</p>\r\n// //                                 <p><strong>Section 80D (Health Insurance):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80D)}</p>\r\n// //                                 <p><strong>Section 80G:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80G)}</p>\r\n// //                                 <p><strong>Section 80TTA:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80TTA)}</p>\r\n// //                                 <p><strong>Section 80TTB:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80TTB)}</p>\r\n// //                                 <p><strong>Section 80E (Education Loan Interest):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80E)}</p>\r\n// //                                 <p><strong>Total Deductions (Aggregated):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_deductions)}</p>\r\n// //                             </div>\r\n\r\n// //                             <div className=\"taxation-summary-section\">\r\n// //                                 <h5>Tax Payments & Regime</h5>\r\n// //                                 <p><strong>Total TDS Credit:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_tds)}</p>\r\n// //                                 <p><strong>Advance Tax Paid:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.advance_tax)}</p>\r\n// //                                 <p><strong>Self-Assessment Tax Paid:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.self_assessment_tax)}</p>\r\n// //                                 <p><strong>Tax Regime Chosen (from docs):</strong> <span className=\"highlight-regime\">{selectedRecord.aggregated_financial_data.tax_regime_chosen || 'Not Specified'}</span></p>\r\n// //                             </div>\r\n// //                         </div>\r\n// //                     )}\r\n\r\n// //                     {/* Final Tax Computation Summary (Rule-Based) */}\r\n// //                     {selectedRecord.final_tax_computation_summary && (\r\n// //                         <div className=\"final-tax-computation-section section-box\">\r\n// //                             <h4>Final Tax Computation Summary (Rule-Based)</h4>\r\n// //                             <div className=\"computation-detail\">\r\n// //                                 <p><strong>Calculated Gross Income:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.calculated_gross_income)}</p>\r\n// //                             </div>\r\n// //                             <div className=\"computation-detail\">\r\n// //                                 <p><strong>Calculated Total Deductions:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.calculated_total_deductions)}</p>\r\n// //                             </div>\r\n// //                             <div className=\"computation-detail\">\r\n// //                                 <p><strong>Computed Taxable Income:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.computed_taxable_income)}</p>\r\n// //                             </div>\r\n// //                             <div className=\"computation-detail\">\r\n// //                                 <p><strong>Estimated Tax Payable (Before TDS):</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.estimated_tax_payable)}</p>\r\n// //                             </div>\r\n// //                             <div className=\"computation-detail\">\r\n// //                                 <p><strong>Total TDS Credit:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.total_tds_credit)}</p>\r\n// //                             </div>\r\n// //                             <div className=\"computation-detail\">\r\n// //                                 <p><strong>Tax Regime Considered for Rule-Based Calculation:</strong> <span className=\"highlight-regime\">{selectedRecord.final_tax_computation_summary.regime_considered || 'N/A'}</span></p>\r\n// //                             </div>\r\n// //                             <div className=\"final-amount-box\">\r\n// //                                 {selectedRecord.final_tax_computation_summary.refund_due_from_tax > 0 && (\r\n// //                                     <p className=\"refund-amount\">\r\n// //                                         <strong>Refund Due from Tax:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.refund_due_from_tax)}\r\n// //                                     </p>\r\n// //                                 )}\r\n// //                                 {selectedRecord.final_tax_computation_summary.tax_due_to_government > 0 && (\r\n// //                                     <p className=\"tax-due-amount\">\r\n// //                                         <strong>Tax Due to Government:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.tax_due_to_government)}\r\n// //                                     </p>\r\n// //                                 )}\r\n// //                             </div>\r\n// //                             {selectedRecord.final_tax_computation_summary.notes && (\r\n// //                                 <p className=\"computation-notes\">\r\n// //                                     <strong>Note:</strong> {selectedRecord.final_tax_computation_summary.notes}\r\n// //                                 </p>\r\n// //                             )}\r\n// //                         </div>\r\n// //                     )}\r\n\r\n// //                     {/* AI Recommendations & Predictions */}\r\n// //                     {selectedRecord.ml_prediction_summary || selectedRecord.suggestions_from_gemini?.length > 0 || selectedRecord.gemini_regime_analysis ? (\r\n// //                         <div className=\"suggestions-output section-box\">\r\n// //                             <h4>AI Recommendations & Predictions</h4>\r\n// //                             {selectedRecord.suggestions_from_gemini && selectedRecord.suggestions_from_gemini.length > 0 ? (\r\n// //                                 <>\r\n// //                                     <h5>Based on Gemini AI:</h5>\r\n// //                                     <ul className=\"suggestions-list\">\r\n// //                                         {selectedRecord.suggestions_from_gemini.map((suggestion, index) => (\r\n// //                                             <li key={index}>{suggestion}</li>\r\n// //                                         ))}\r\n// //                                     </ul>\r\n// //                                 </>\r\n// //                             ) : (\r\n// //                                 <p>Gemini did not provide specific tax-saving suggestions for this record.</p>\r\n// //                             )}\r\n\r\n// //                             {selectedRecord.gemini_regime_analysis && (\r\n// //                                 <div className=\"gemini-regime-analysis\">\r\n// //                                     <h5>Gemini's Regime Analysis:</h5>\r\n// //                                     <p>{selectedRecord.gemini_regime_analysis}</p>\r\n// //                                 </div>\r\n// //                             )}\r\n\r\n// //                             {selectedRecord.ml_prediction_summary && (\r\n// //                                 <>\r\n// //                                     <h5>ML Model Prediction:</h5>\r\n// //                                     {selectedRecord.ml_prediction_summary.predicted_tax_regime && (\r\n// //                                         <p><strong>Predicted Tax Regime:</strong> {selectedRecord.ml_prediction_summary.predicted_tax_regime}</p>\r\n// //                                     )}\r\n// //                                     <p><strong>Predicted Tax Liability:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_tax_liability)}</p>\r\n// //                                     <p className=\"refund-amount\"><strong>Predicted Refund Due:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_refund_due)}</p>\r\n// //                                     <p className=\"tax-due-amount\"><strong>Predicted Additional Tax Due:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_additional_due)}</p>\r\n// //                                     {selectedRecord.ml_prediction_summary.notes && (\r\n// //                                         <p><strong>Notes:</strong> {selectedRecord.ml_prediction_summary.notes}</p>\r\n// //                                     )}\r\n// //                                 </>\r\n// //                             )}\r\n// //                         </div>\r\n// //                     ) : (\r\n// //                         <div className=\"section-box\">\r\n// //                             <p>No AI recommendations or ML predictions available for this record yet. These are generated when you click \"Get AI Suggestions & ML Predictions\" after uploading documents.</p>\r\n// //                         </div>\r\n// //                     )}\r\n\r\n// //                 </div>\r\n// //             )}\r\n// //         </div>\r\n// //     );\r\n// // };\r\n\r\n// // export default TaxHistory;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import Cookies from 'js-cookie';\r\n// import './index.css'; // Import TaxHistory specific CSS\r\n\r\n// const TaxHistory = () => {\r\n//     const [history, setHistory] = useState([]);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [message, setMessage] = useState('');\r\n//     const [messageType, setMessageType] = useState(''); // 'info', 'success', 'error'\r\n//     const [selectedRecord, setSelectedRecord] = useState(null); // To view full details of a record\r\n//     const [isGeneratingITR, setIsGeneratingITR] = useState(false);\r\n\r\n//     // Helper function to safely format currency values\r\n//     const formatCurrency = (value) => {\r\n//         if (value === null || value === undefined || isNaN(parseFloat(value))) {\r\n//             return 'N/A';\r\n//         }\r\n//         return parseFloat(value).toLocaleString('en-IN', {\r\n//             style: 'currency',\r\n//             currency: 'INR',\r\n//             minimumFractionDigits: 2,\r\n//             maximumFractionDigits: 2,\r\n//         });\r\n//     };\r\n\r\n//     useEffect(() => {\r\n//         const fetchHistory = async () => {\r\n//             setLoading(true);\r\n//             setMessage('Fetching your tax history...');\r\n//             setMessageType('info');\r\n//             const jwt_token = Cookies.get('jwt_token');\r\n\r\n//             try {\r\n//                 const config = {\r\n//                     headers: {\r\n//                         'Authorization': `Bearer ${jwt_token}`,\r\n//                     }\r\n//                 };\r\n//                 const response = await axios.get('http://127.0.0.1:5000/api/tax-records', config); // Correct route\r\n\r\n//                 if (response.data.status === 'success') {\r\n//                     // Ensure response.data.history is an array before setting the history state\r\n//                     if (Array.isArray(response.data.history)) {\r\n//                         setHistory(response.data.history);\r\n//                         setMessage('Tax history loaded successfully.');\r\n//                         setMessageType('success');\r\n//                     } else {\r\n//                         // Handle cases where history data is not an array\r\n//                         console.error('API returned non-array data for history property:', response.data.history);\r\n//                         setHistory([]); // Set to empty array to prevent errors\r\n//                         setMessage('Failed to load tax history: Unexpected data format.');\r\n//                         setMessageType('error');\r\n//                     }\r\n//                 } else {\r\n//                     // Handle cases where API status is not 'success'\r\n//                     setMessage(response.data.message || 'Failed to fetch tax history.');\r\n//                     setMessageType('error');\r\n//                     setHistory([]); // Clear history on error to prevent rendering issues\r\n//                 }\r\n//             } catch (error) {\r\n//                 console.error('Fetch history error:', error);\r\n//                 if (error.response) {\r\n//                     if (error.response.status === 401) {\r\n//                         setMessage('Authentication required. Please log in.');\r\n//                     } else if (error.response.data && error.response.data.message) {\r\n//                         setMessage(`Error: ${error.response.data.message}`);\r\n//                     } else {\r\n//                         setMessage(`Server responded with status ${error.response.status}`);\r\n//                     }\r\n//                 } else {\r\n//                     setMessage('An error occurred while fetching tax history. Check network connection and backend server.');\r\n//                 }\r\n//                 setMessageType('error');\r\n//                 setHistory([]); // Clear history on network/server error as well\r\n//             } finally {\r\n//                 setLoading(false);\r\n//             }\r\n//         };\r\n\r\n//         fetchHistory();\r\n//     }, []); // Empty dependency array means this runs once on mount\r\n\r\n//     const handleViewDetails = (record) => {\r\n//         setSelectedRecord(record);\r\n//     };\r\n\r\n//     const handleCloseDetails = () => {\r\n//         setSelectedRecord(null);\r\n//     };\r\n\r\n//     const handleGenerateITRForm = async (recordId) => {\r\n//         setIsGeneratingITR(true);\r\n//         setMessage('Generating ITR form...');\r\n//         setMessageType('info');\r\n\r\n//         const jwt_token = Cookies.get('jwt_token');\r\n\r\n//         try {\r\n//             const config = {\r\n//                 headers: {\r\n//                     'Authorization': `Bearer ${jwt_token}`,\r\n//                 },\r\n//                 responseType: 'blob', // Important for receiving a file\r\n//             };\r\n            \r\n//             const response = await axios.get(`http://127.0.0.1:5000/api/generate-itr/${recordId}`, config); // Corrected route\r\n\r\n//             if (response.status === 200) {\r\n//                 const blob = new Blob([response.data], { type: 'application/pdf' });\r\n//                 const downloadUrl = window.URL.createObjectURL(blob);\r\n//                 const contentDisposition = response.headers['content-disposition'];\r\n//                 let filename = `ITR_Form_${recordId}.pdf`; // Default filename\r\n\r\n//                 if (contentDisposition) {\r\n//                     const filenameMatch = contentDisposition.match(/filename=\"([^\"]+)\"/);\r\n//                     if (filenameMatch && filenameMatch[1]) {\r\n//                         filename = filenameMatch[1];\r\n//                     }\r\n//                 }\r\n                \r\n//                 const link = document.createElement('a');\r\n//                 link.href = downloadUrl;\r\n//                 link.setAttribute('download', filename);\r\n//                 document.body.appendChild(link);\r\n//                 link.click();\r\n//                 link.remove();\r\n//                 window.URL.revokeObjectURL(downloadUrl);\r\n\r\n//                 setMessage('ITR form generated and downloaded successfully!');\r\n//                 setMessageType('success');\r\n//             } else {\r\n//                 const errorData = await new Response(response.data).text(); // Read blob as text for error\r\n//                 setMessage(`Failed to generate ITR form: ${errorData || response.statusText}`);\r\n//                 setMessageType('error');\r\n//             }\r\n//         } catch (error) {\r\n//             console.error('ITR generation error:', error);\r\n//             if (axios.isAxiosError(error) && error.response && error.response.data) {\r\n//                 const reader = new FileReader();\r\n//                 reader.onload = () => {\r\n//                     try {\r\n//                         const errorJson = JSON.parse(reader.result);\r\n//                         setMessage(`Error generating ITR form: ${errorJson.message || JSON.stringify(errorJson)}`);\r\n//                     } catch (e) {\r\n//                         setMessage(`Error generating ITR form: ${reader.result || error.response.statusText}`);\r\n//                     }\r\n//                 };\r\n//                 reader.readAsText(error.response.data);\r\n//             } else {\r\n//                 setMessage('Network error or server unavailable during ITR form generation.');\r\n//             }\r\n//             setMessageType('error');\r\n//         } finally {\r\n//             setIsGeneratingITR(false);\r\n//         }\r\n//     };\r\n\r\n\r\n//     return (\r\n//         <div className=\"tax-history-container section-box\">\r\n//             <h2 className=\"tax-history-title\">Your Tax Filing History</h2>\r\n\r\n//             {loading && (\r\n//                 <div className=\"tax-history-loading\">\r\n//                     <div className=\"tax-history-spinner\"></div>\r\n//                     {message}\r\n//                 </div>\r\n//             )}\r\n\r\n//             {message && !loading && (\r\n//                 <div className={`tax-history-message ${messageType}`}>\r\n//                     {message}\r\n//                 </div>\r\n//             )}\r\n\r\n//             {history.length === 0 && !loading && messageType !== 'error' && (\r\n//                 <p className=\"no-records-message\">No tax records found. Upload documents to get started!</p>\r\n//             )}\r\n\r\n//             {!selectedRecord && history.length > 0 && !loading && (\r\n//                 <div className=\"history-list\">\r\n//                     {history.map((record) => (\r\n//                         <div key={record._id} className=\"history-item section-box\">\r\n//                             <div className=\"history-item-header\">\r\n//                                 <h3>Record ID: {record._id.substring(0, 8)}...</h3>\r\n//                                 <span className=\"timestamp\">\r\n//                                     {new Date(record.timestamp).toLocaleString()}\r\n//                                 </span>\r\n//                             </div>\r\n//                             <div className=\"history-item-details\">\r\n//                                 <p><strong>Financial Year:</strong> {record.aggregated_financial_data?.financial_year || 'N/A'}</p>\r\n//                                 <p><strong>Assessment Year:</strong> {record.aggregated_financial_data?.assessment_year || 'N/A'}</p>\r\n//                                 <p><strong>Name:</strong> {record.aggregated_financial_data?.name_of_employee || 'N/A'}</p> {/* Corrected property name */}\r\n//                                 <p><strong>Estimated Tax Payable:</strong> {formatCurrency(record.final_tax_computation_summary?.estimated_tax_payable)}</p>\r\n//                                 <p><strong>Refund Due:</strong> {formatCurrency(record.final_tax_computation_summary?.predicted_refund_due)}</p> {/* Corrected property name */}\r\n//                                 <p><strong>Tax Due:</strong> {formatCurrency(record.final_tax_computation_summary?.predicted_additional_due)}</p> {/* Corrected property name */}\r\n//                             </div>\r\n//                             <div className=\"history-item-actions\">\r\n//                                 <button onClick={() => handleViewDetails(record)} className=\"view-details-button\">\r\n//                                     View Details\r\n//                                 </button>\r\n//                                 <button\r\n//                                     onClick={() => handleGenerateITRForm(record._id)}\r\n//                                     className=\"generate-itr-button\"\r\n//                                     disabled={isGeneratingITR}\r\n//                                 >\r\n//                                     {isGeneratingITR ? 'Generating...' : 'Generate ITR Form'}\r\n//                                 </button>\r\n//                             </div>\r\n//                         </div>\r\n//                     ))}\r\n//                 </div>\r\n//             )}\r\n\r\n//             {selectedRecord && (\r\n//                 <div className=\"selected-record-details\">\r\n//                     <button onClick={handleCloseDetails} className=\"back-button\">\r\n//                         &larr; Back to History\r\n//                     </button>\r\n//                     <h3 className=\"selected-record-title\">Details for Record ID: {selectedRecord._id}</h3>\r\n\r\n//                     {/* Document Processing Summary */}\r\n//                     {selectedRecord.document_processing_summary && (\r\n//                         <div className=\"document-processing-summary-section section-box\">\r\n//                             <h4>Document Processing Summary</h4>\r\n//                             {selectedRecord.document_processing_summary.map((doc, index) => {\r\n//                                 const statusClass = doc.status === 'success' ? 'status-success' :\r\n//                                                      doc.status === 'warning' ? 'status-warning' : 'status-error';\r\n//                                 return (\r\n//                                     <div key={index} className=\"document-status-item\">\r\n//                                         <p><strong>File:</strong> {doc.filename} ({doc.stored_path && <a href={`http://127.0.0.1:5000${doc.stored_path}`} target=\"_blank\" rel=\"noopener noreferrer\">View Stored Document</a>})</p>\r\n//                                         <p><strong>Status:</strong> <span className={statusClass}>{doc.status?.toUpperCase() || 'N/A'}</span></p>\r\n//                                         <p><strong>Identified Type:</strong> {doc.identified_type || 'N/A'}</p>\r\n//                                         <p><strong>Message:</strong> {doc.message || 'N/A'}</p>\r\n//                                         {doc.extracted_fields && Object.keys(doc.extracted_fields).length > 0 && (\r\n//                                             <p><strong>Extracted Fields (Partial):</strong>\r\n//                                                 <pre className=\"extracted-fields-preview\">\r\n//                                                     {JSON.stringify(doc.extracted_fields, null, 2)}\r\n//                                                 </pre>\r\n//                                             </p>\r\n//                                         )}\r\n//                                         {doc.extracted_raw_text && (\r\n//                                             <p><strong>Extracted Raw Text Snippet:</strong> <pre className=\"extracted-raw-text-preview\">{doc.extracted_raw_text.substring(0, 200)}...</pre></p>\r\n//                                         )}\r\n//                                     </div>\r\n//                                 );\r\n//                             })}\r\n//                         </div>\r\n//                     )}\r\n\r\n//                     {/* Aggregated Financial Data */}\r\n//                     {selectedRecord.aggregated_financial_data && (\r\n//                         <div className=\"aggregated-financial-data-section section-box\">\r\n//                             <h4>Aggregated Financial Data</h4>\r\n//                             <div className=\"income-details-section\">\r\n//                                 <h5>Income Details</h5>\r\n//                                 <p><strong>Financial Year:</strong> {selectedRecord.aggregated_financial_data.financial_year || 'N/A'}</p>\r\n//                                 <p><strong>Assessment Year:</strong> {selectedRecord.aggregated_financial_data.assessment_year || 'N/A'}</p>\r\n//                                 <p><strong>Name:</strong> {selectedRecord.aggregated_financial_data.name_of_employee || 'N/A'}</p>\r\n//                                 <p><strong>PAN:</strong> {selectedRecord.aggregated_financial_data.pan_of_employee || 'N/A'}</p>\r\n//                                 <p><strong>Date of Birth:</strong> {selectedRecord.aggregated_financial_data.date_of_birth || 'N/A'}</p>\r\n//                                 <p><strong>Age:</strong> {selectedRecord.aggregated_financial_data.Age || 'N/A'}</p>\r\n//                                 <p><strong>Gross Annual Salary:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.gross_salary_total)}</p>\r\n//                                 <p><strong>Exempt Allowances:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_exempt_allowances)}</p>\r\n//                                 <p><strong>Income from House Property:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.income_from_house_property)}</p>\r\n//                                 {/* Removed these as backend aggregates to income_from_other_sources */}\r\n//                                 {/* <p><strong>Interest from Savings:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_interest_savings)}</p>\r\n//                                 <p><strong>Interest from FD:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_interest_fd)}</p>\r\n//                                 <p><strong>Dividend Income:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_dividend)}</p>\r\n//                                 <p><strong>Miscellaneous Income:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.other_income_misc)}</p> */}\r\n//                                 <p><strong>Income from Other Sources:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.income_from_other_sources)}</p>\r\n//                                 <p><strong>Long Term Capital Gains:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.capital_gains_long_term)}</p>\r\n//                                 <p><strong>Short Term Capital Gains:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.capital_gains_short_term)}</p>\r\n//                                 <p className=\"font-bold\"><strong>Total Gross Income (Aggregated):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_gross_income)}</p>\r\n//                             </div>\r\n\r\n//                             <div className=\"deductions-section\">\r\n//                                 <h5>Deductions Claimed</h5>\r\n//                                 <p><strong>Standard Deduction:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.standard_deduction)}</p>\r\n//                                 <p><strong>Professional Tax:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.professional_tax)}</p>\r\n//                                 <p><strong>Interest on Home Loan (Section 24(b)):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.interest_on_housing_loan_24b)}</p>\r\n//                                 <p><strong>Section 80C Investments:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80C)}</p>\r\n//                                 <p><strong>Section 80CCD1B:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80CCD1B)}</p>\r\n//                                 <p><strong>Section 80D (Health Insurance):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80D)}</p>\r\n//                                 <p><strong>Section 80G:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80G)}</p>\r\n//                                 <p><strong>Section 80TTA:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80TTA)}</p>\r\n//                                 <p><strong>Section 80TTB:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80TTB)}</p>\r\n//                                 <p><strong>Section 80E (Education Loan Interest):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.deduction_80E)}</p>\r\n//                                 <p className=\"font-bold\"><strong>Total Deductions (Overall):</strong> {formatCurrency(selectedRecord.aggregated_financial_data.total_deductions)}</p>\r\n//                             </div>\r\n\r\n//                             <div className=\"taxation-summary-section\">\r\n//                                 <h5>Tax Payments & Regime</h5>\r\n//                                 <p><strong>Total TDS Credit:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.total_tax_paid_credit)}</p>\r\n//                                 <p><strong>Advance Tax Paid:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.advance_tax)}</p>\r\n//                                 <p><strong>Self-Assessment Tax Paid:</strong> {formatCurrency(selectedRecord.aggregated_financial_data.self_assessment_tax)}</p>\r\n//                                 <p><strong>Tax Regime Chosen (from docs):</strong> <span className=\"highlight-regime\">{selectedRecord.aggregated_financial_data.tax_regime_chosen || 'Not Specified'}</span></p>\r\n//                             </div>\r\n//                         </div>\r\n//                     )}\r\n\r\n//                     {/* Final Tax Computation Summary (Rule-Based) */}\r\n//                     {selectedRecord.final_tax_computation_summary && (\r\n//                         <div className=\"final-tax-computation-section section-box\">\r\n//                             <h4>Final Tax Computation Summary (Rule-Based)</h4>\r\n//                             <div className=\"computation-detail\">\r\n//                                 <p><strong>Calculated Gross Income:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.calculated_gross_income)}</p>\r\n//                             </div>\r\n//                             <div className=\"computation-detail\">\r\n//                                 <p><strong>Calculated Total Deductions:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.calculated_total_deductions)}</p>\r\n//                             </div>\r\n//                             <div className=\"computation-detail\">\r\n//                                 <p><strong>Computed Taxable Income:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.computed_taxable_income)}</p>\r\n//                             </div>\r\n//                             <div className=\"computation-detail\">\r\n//                                 <p><strong>Estimated Tax Payable (Before Credits):</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.estimated_tax_payable)}</p>\r\n//                             </div>\r\n//                             <div className=\"computation-detail\">\r\n//                                 <p><strong>Total Tax Paid Credit:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.total_tax_paid_credit)}</p>\r\n//                             </div>\r\n//                             <div className=\"computation-detail\">\r\n//                                 <p><strong>Tax Regime Considered for Rule-Based Calculation:</strong> <span className=\"highlight-regime\">{selectedRecord.final_tax_computation_summary.predicted_tax_regime || 'N/A'}</span></p> {/* Corrected to predicted_tax_regime from backend */}\r\n//                             </div>\r\n//                             <div className=\"final-amount-box\">\r\n//                                 {selectedRecord.final_tax_computation_summary.predicted_refund_due > 0 && (\r\n//                                     <p className=\"refund-amount\">\r\n//                                         <strong>Refund Due:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.predicted_refund_due)}\r\n//                                     </p>\r\n//                                 )}\r\n//                                 {selectedRecord.final_tax_computation_summary.predicted_additional_due > 0 && (\r\n//                                     <p className=\"tax-due-amount\">\r\n//                                         <strong>Additional Tax Due:</strong> {formatCurrency(selectedRecord.final_tax_computation_summary.predicted_additional_due)}\r\n//                                     </p>\r\n//                                 )}\r\n//                             </div>\r\n//                             {selectedRecord.final_tax_computation_summary.notes && (\r\n//                                 <p className=\"computation-notes\">\r\n//                                     <strong>Note:</strong> {Array.isArray(selectedRecord.final_tax_computation_summary.notes) ? selectedRecord.final_tax_computation_summary.notes.join(', ') : selectedRecord.final_tax_computation_summary.notes}\r\n//                                 </p>\r\n//                             )}\r\n\r\n//                             {selectedRecord.final_tax_computation_summary.calculation_details && selectedRecord.final_tax_computation_summary.calculation_details.length > 0 && (\r\n//                                 <div className=\"detailed-calculation-section mt-4\">\r\n//                                     <h5>Detailed Calculation Steps:</h5>\r\n//                                     <ul className=\"list-disc list-inside text-sm pl-4\">\r\n//                                         {selectedRecord.final_tax_computation_summary.calculation_details.map((detail, index) => (\r\n//                                             <li key={index} className=\"mb-1\">{detail}</li>\r\n//                                         ))}\r\n//                                     </ul>\r\n//                                 </div>\r\n//                             )}\r\n//                         </div>\r\n//                     )}\r\n\r\n//                     {/* AI Recommendations & Predictions */}\r\n//                     {selectedRecord.ml_prediction_summary || selectedRecord.suggestions_from_gemini?.length > 0 || selectedRecord.gemini_regime_analysis ? (\r\n//                         <div className=\"suggestions-output section-box\">\r\n//                             <h4>AI Recommendations & Predictions</h4>\r\n//                             {selectedRecord.suggestions_from_gemini && selectedRecord.suggestions_from_gemini.length > 0 ? (\r\n//                                 <>\r\n//                                     <h5>Based on Gemini AI:</h5>\r\n//                                     <ul className=\"suggestions-list\">\r\n//                                         {selectedRecord.suggestions_from_gemini.map((suggestion, index) => (\r\n//                                             <li key={index}>{suggestion}</li>\r\n//                                         ))}\r\n//                                     </ul>\r\n//                                 </>\r\n//                             ) : (\r\n//                                 <p>Gemini did not provide specific tax-saving suggestions for this record.</p>\r\n//                             )}\r\n\r\n//                             {selectedRecord.gemini_regime_analysis && (\r\n//                                 <div className=\"gemini-regime-analysis\">\r\n//                                     <h5>Gemini's Regime Analysis:</h5>\r\n//                                     <p>{selectedRecord.gemini_regime_analysis}</p>\r\n//                                 </div>\r\n//                             )}\r\n\r\n//                             {selectedRecord.ml_prediction_summary && (\r\n//                                 <>\r\n//                                     <h5>ML Model Prediction:</h5>\r\n//                                     {selectedRecord.ml_prediction_summary.predicted_tax_regime && (\r\n//                                         <p><strong>Predicted Tax Regime:</strong> {selectedRecord.ml_prediction_summary.predicted_tax_regime}</p>\r\n//                                     )}\r\n//                                     <p><strong>Predicted Tax Liability:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_tax_liability)}</p>\r\n//                                     <p className=\"refund-amount\"><strong>Predicted Refund Due:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_refund_due)}</p>\r\n//                                     <p className=\"tax-due-amount\"><strong>Predicted Additional Tax Due:</strong> {formatCurrency(selectedRecord.ml_prediction_summary.predicted_additional_due)}</p>\r\n//                                     {selectedRecord.ml_prediction_summary.notes && (\r\n//                                         <p><strong>Notes:</strong> {selectedRecord.ml_prediction_summary.notes}</p>\r\n//                                     )}\r\n//                                 </>\r\n//                             )}\r\n//                         </div>\r\n//                     ) : (\r\n//                         <div className=\"section-box\">\r\n//                             <p>No AI recommendations or ML predictions available for this record yet. These are generated when you click \"Get AI Suggestions & ML Predictions\" after uploading documents.</p>\r\n//                         </div>\r\n//                     )}\r\n\r\n//                 </div>\r\n//             )}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default TaxHistory;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}