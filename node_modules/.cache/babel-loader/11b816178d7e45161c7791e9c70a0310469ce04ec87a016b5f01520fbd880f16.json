{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gumma\\\\Downloads\\\\All_Projects\\\\GarudaTaxAi\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Cookies from 'js-cookie';\nimport Auth from './components/Auth'; // Assuming Auth component handles login/register\nimport Dashboard from './components/Dashboard'; // New Dashboard component\nimport './App.css'; // Your main app CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loadingAuth, setLoadingAuth] = useState(true);\n  useEffect(() => {\n    // Check for JWT token in cookies on component mount\n    const token = Cookies.get('jwt_token');\n    if (token) {\n      // In a real application, you'd want to validate this token with your backend\n      // For now, we'll assume its presence means authenticated\n      setIsAuthenticated(true);\n    }\n    setLoadingAuth(false);\n  }, []);\n  const handleLogin = token => {\n    Cookies.set('jwt_token', token, {\n      expires: 1\n    }); // Token expires in 1 day\n    setIsAuthenticated(true);\n  };\n  const handleLogout = () => {\n    Cookies.remove('jwt_token');\n    setIsAuthenticated(false);\n  };\n  if (loadingAuth) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center min-h-screen bg-gray-100\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl font-semibold text-gray-700\",\n        children: \"Loading authentication...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/auth\",\n          element: isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 58\n          }, this) : /*#__PURE__*/_jsxDEV(Auth, {\n            onLogin: handleLogin\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 89\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/dashboard/*\" // Use /* to allow nested routes within Dashboard\n          ,\n          element: isAuthenticated ? /*#__PURE__*/_jsxDEV(Dashboard, {\n            onLogout: handleLogout\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 40\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/auth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 80\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: isAuthenticated ? /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/dashboard\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 40\n          }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n            to: \"/auth\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 71\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"827WYdesHbGj0/GGWejS8hBPsEU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","Cookies","Auth","Dashboard","jsxDEV","_jsxDEV","App","_s","isAuthenticated","setIsAuthenticated","loadingAuth","setLoadingAuth","token","get","handleLogin","set","expires","handleLogout","remove","className","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","to","onLogin","onLogout","_c","$RefreshReg$"],"sources":["C:/Users/gumma/Downloads/All_Projects/GarudaTaxAi/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\nimport Auth from './components/Auth'; // Assuming Auth component handles login/register\r\nimport Dashboard from './components/Dashboard'; // New Dashboard component\r\nimport './App.css'; // Your main app CSS\r\n\r\nfunction App() {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loadingAuth, setLoadingAuth] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for JWT token in cookies on component mount\r\n    const token = Cookies.get('jwt_token');\r\n    if (token) {\r\n      // In a real application, you'd want to validate this token with your backend\r\n      // For now, we'll assume its presence means authenticated\r\n      setIsAuthenticated(true);\r\n    }\r\n    setLoadingAuth(false);\r\n  }, []);\r\n\r\n  const handleLogin = (token) => {\r\n    Cookies.set('jwt_token', token, { expires: 1 }); // Token expires in 1 day\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    Cookies.remove('jwt_token');\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  if (loadingAuth) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-100\">\r\n        <div className=\"text-xl font-semibold text-gray-700\">Loading authentication...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Routes>\r\n          {/* Route for Login/Register */}\r\n          <Route path=\"/auth\" element={isAuthenticated ? <Navigate to=\"/dashboard\" /> : <Auth onLogin={handleLogin} />} />\r\n          \r\n          {/* Protected Dashboard Route - this will be the main 'home' for logged-in users */}\r\n          <Route \r\n            path=\"/dashboard/*\" // Use /* to allow nested routes within Dashboard\r\n            element={isAuthenticated ? <Dashboard onLogout={handleLogout} /> : <Navigate to=\"/auth\" />} \r\n          />\r\n\r\n          {/* Default route: if authenticated, go to dashboard, otherwise to auth */}\r\n          <Route \r\n            path=\"/\" \r\n            element={isAuthenticated ? <Navigate to=\"/dashboard\" /> : <Navigate to=\"/auth\" />} \r\n          />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}